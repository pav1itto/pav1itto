/**
 * Solves a Sudoku board.
 *
 * @param {number[][]} board - The Sudoku board represented as a 2D array.
 * @returns {boolean} True if the Sudoku board is solvable, false otherwise.
 */
function solveSudoku(board) {
    // Helper function to check if a number can be placed in a specific position on the board
    function isValid(board, row, col, num) {
        // Check if the number already exists in the same row
        for (let i = 0; i < 9; i++) {
            if (board[row][i] === num) {
                return false;
            }
        }

        // Check if the number already exists in the same column
        for (let i = 0; i < 9; i++) {
            if (board[i][col] === num) {
                return false;
            }
        }

        // Check if the number already exists in the same 3x3 box
        const startRow = Math.floor(row / 3) * 3;
        const startCol = Math.floor(col / 3) * 3;
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (board[startRow + i][startCol + j] === num) {
                    return false;
                }
            }
        }

        return true;
    }

    // Helper function to find the next empty cell on the board
    function findEmptyCell(board) {
        for (let row = 0; row < 9; row++) {
            for (let col = 0; col < 9; col++) {
                if (board[row][col] === 0) {
                    return [row, col];
                }
            }
        }
        return null;
    }

    // Recursive function to solve the Sudoku board using backtracking
    function solve(board) {
        const emptyCell = findEmptyCell(board);

        // If there are no more empty cells, the board is solved
        if (!emptyCell) {
            return true;
        }

        const [row, col] = emptyCell;

        // Try placing numbers from 1 to 9 in the empty cell
        for (let num = 1; num <= 9; num++) {
            if (isValid(board, row, col, num)) {
                board[row][col] = num;

                // Recursively solve the board
                if (solve(board)) {
                    return true;
                }

                // If the current placement leads to an invalid solution, backtrack and try the next number
                board[row][col] = 0;
            }
        }

        // If no number can be placed in the current cell, backtrack
        return false;
    }

    // Create a copy of the board to avoid modifying the original board
    const boardCopy = JSON.parse(JSON.stringify(board));

    // Solve the Sudoku board
    const isSolvable = solve(boardCopy);

    return isSolvable;
}

// Usage Example for solveSudoku

const sudokuBoard = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
];

console.log(solveSudoku(sudokuBoard));
